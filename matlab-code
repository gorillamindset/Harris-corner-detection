% path_video = fullfile('Damage1.mp4');
% % addpath('myfiles') 
clearvars; close all; clc;

videoname = 'Damage1.mp4';
v = VideoReader('D:\M TECH\Thesis work\my project\matlab\Damage1.mp4');
frameRate = v.Framerate;
frame = readFrame(v);
figure;
imshow(frame);
title(['Frame_Rate:', num2str(frameRate), 'fps']);

% ROI selection
jointID = 1;
roi = drawrectangle;


points = detectHarrisFeatures (im2gray (frame),'ROI',roi.Position);
figure;
im = insertShape(frame,'Rectangle',roi.Position,'color','red');
im = insertMarker (im, points. Location,"o",'color', 'white');
imshow(im);title([num2str(size(points,1)),"points detected"]);


% create a tracker object
tracker = vision.PointTracker('MaxBidirectionalError' ,1);
% initialize the tracker 
initialize (tracker,points.Location, frame);
% Read, track, display points, and results in each video frame.
videoPlayer = vision.VideoPlayer();
N = round(10*frameRate); %number of frames
pos = zeros (N+1,size(points.Location,1), 2);
pos (1,:,:) = points.Location;
for I = 1:N
    frame = readFrame(v);
    [points, validity] = tracker (frame);
    out = insertMarker (frame, points (validity, :), '+' );
    videoPlayer(out);
    pos (I+1, :,:) = points;
end

% displacement (2D)
Disp2D = pos - pos(ones (1, N+1),:,:);
% plot displacement
t = (1: (N+1)) / frameRate;
figure;
subplot (2,1,1) ; plot (t, squeeze(Disp2D(:,:,1)));xlabel('Time[s]');ylabel('Disp(X)[pixels]'); 
subplot (2,1,2) ; plot (t, squeeze(Disp2D(:,: ,2)));xlabel('Time[s]');ylabel('Disp(Y)[pixels]');

Disp2D_ave = squeeze(mean(Disp2D, 2));
Fdd = fft(Disp2D_ave);
F = (0:N) *frameRate/N;
figure;
subplot (2,1,1); plot (t,Disp2D_ave(:,1));xlabel('Time[s]');ylabel('Ave.Disp(X) [pixels]'); 
subplot (2,1,2); plot(t,Disp2D_ave(:,2));xlabel('Time[s]');ylabel('Ave.Disp(Y) [pixels]');


figure; semilogy(F,abs (Fdd));xlabel ('Frequency[Hz]');ylabel('FFT amplitude');legend ("X", "K")


% set the time to 0.0
v.CurrentTime = 0.0;
frame = readFrame(v);
figure; imshow(frame);
l = drawline;

% estimate the scaling factor
Nbays = 7;
dist_m = Nbays*0.3937;
dist_px = l.Position(2,1) - l.Position(1,1);
px2m = dist_m / dist_px;
% apply scale
Disp_m = px2m * Disp2D_ave; %first column: longitudinal, second column: vertical
%plotting figure;
subplot (2,1,1); plot (t,Disp_m(:,1));xlabel ('Time[s]');ylabel('Long.Disp[m]'); 
subplot (2,1,2); plot (t,Disp_m(:,2));xlabel('Time[s]');ylabel('Vert.Disp[m]');


frame_ref = frame; % the image used in the discussion of Case 1.
% videoName_c2 = 'Damage3.mp4';
videoReader_c2 = VideoReader ("Damage_small1.mp4") ;
frame_c2 = readFrame(videoReader_c2);

cpselect (frame_ref, frame_c2);

tform = estimateGeometricTransform('movingPoints','fixedPoints','projective');



path_gt = fullfile('D:\M TECH\Thesis work\my project\matlab\ground_truth');
fud = fullfile('D:\M TECH\Thesis work\my project\matlab\ground_truth\undamaged\GroundTruthData.txt');
fd = fullfile('D:\M TECH\Thesis work\my project\matlab\ground_truth\Damage1\GroundTruthData.txt');
f_all = {fud,fd};

% time history data is stored in row 2-end, columns 1-16. See readme.txt
data = cell(1,2);
for I = 1:2
    Mtrx = readmatrix(f_all{I});
    data{I} = Mtrx(2:end,1:16);
end

% plot displacement data of the undamaged structure
t_gt = (0:(size(data{1},1)-1))/frameRate;
figure;
plot(t_gt,data{1});xlabel('Time[s]');ylabel('Vert.Disp[m]');

N = size(data{1},1);
[Pud,F] = pwelch(data{1},[],[],N,frameRate);
figure;semilogy(F,mean(Pud,2));xlabel('Frequency[Hz]');ylabel('Avg.PSD');


% subspace identification
nx = 10; %system order: need to be tuned
data_id = iddata(data{1},[],1/frameRate);
sys = n4sid(data_id,nx);

damp(sys);

p = 2;
SDLV = StochasticDLV(Ac_ud,Cc_ud,Ac_d,Cc_d,p);
% p =0 for displacement measurement 
% (1 for velocity measurement, 2 for acceleration measurement)


% for r = 40:5:95 %consider stiffness reduction between 40% and 95%, with an increment of 5%
%     model = getFEModel(r); % obtain a new FE model with the damage assumption
%     modalParam = ... % obtain modal parameters using the new FE model
%     score =... %evaluate the match between the measured modal parameters and the modalParam obtained in the previous line.
%     ... %update the stiffness reduction ratio if the score is better than previously obtained values.
% end

% videoName = 'Damage1.mp4';
% videoReader = VideoReader('D:\M TECH\Thesis work\my project\matlab\Damage1.mp4');
% 
% frameRate = videoReader. FrameRate;
% frame = readFrame (videoReader);
% figure; imshow (frame);title(['Frame Rate: ',numstr(frameRate), 'fps']);
